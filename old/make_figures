#!/usr/bin/env python3
import json

from matplotlib import cm
from matplotlib.pyplot import *
from numpy import *
import seaborn as sbn

################################################################################
# Data Loading
################################################################################

with open('experiment_0_1-cas.json', 'r') as f:
    nets = json.loads(f.read())

################################################################################
# Statistic Definitions
################################################################################

def n_cor(layer):
    return hstack(
        [[sum(layer['n_correct'])]] +
        [n_cor(ch) for ch in layer['children']])

def n_cor_of(layer, label):
    return hstack(
        [[layer['n_correct'][label]]] +
        [n_cor_of(ch, label) for ch in layer['children']])

def n_inc(layer):
    return hstack(
        [[sum(layer['n_incorrect'])]] +
        [n_inc(ch) for ch in layer['children']])

def n_inc_of(layer, label):
    return hstack(
        [[layer['n_incorrect'][label]]] +
        [n_inc_of(ch, label) for ch in layer['children']])

def n_dec(layer):
    return n_cor(layer) + n_inc(layer)

def n_dec_of(layer, label):
    return n_cor_of(layer, label) + n_inc_of(layer, label)

def n_accum_ops(layer, n_prev_ops=0):
    return hstack(
        [[n_prev_ops + layer['op_count']]] +
        [n_accum_ops(ch, n_prev_ops + layer['op_count'])
         for ch in layer['children']])

def moc(layer):
    return sum(n_dec(layer) * n_accum_ops(layer)) / sum(n_dec(layer))

def acc(layer):
    return sum(n_cor(layer)) / sum(n_dec(layer))

# ################################################################################
# # Hack - Visualize Network Literal
# ################################################################################
#
# net = {'root': {'n_incorrect': [3, 0, 6, 4, 1, 7, 2, 3, 6, 1], 'n_correct': [278, 339, 201, 105, 94, 75, 315, 235, 44, 26], 'op_count': 0, 'children': [{'n_incorrect': [16, 27, 77, 64, 60, 70, 42, 69, 54, 86], 'n_correct': [682, 769, 748, 833, 826, 739, 599, 721, 864, 895], 'op_count': 200704, 'children': [{'n_incorrect': [1, 0, 0, 4, 1, 1, 0, 0, 2, 1], 'n_correct': [0, 0, 0, 0, 0, 0, 0, 0, 4, 0], 'op_count': 65536, 'children': [], 'size': 256}], 'size': 256}], 'size': 784}, 'hyperparams': {'batch_size': 32, 'k_cpt': 5e-07, 'λ': 0.0013533527962863445, 'k_l2': 9.999999974752427e-07, 'n_epochs': 500, 'w_scale': 0.0010000000474974513, 'ε': 0.5}}
#
# figure(figsize=(8, 4))
# sbn.set_style('ticks')
# ylabel('Fraction of Decisions Made')
# xlabel('Layer')
# k_cpt = net['hyperparams']['k_cpt']
# frac_dec = n_dec(net['root']) / sum(n_dec(net['root']))
# frac_cor = n_cor(net['root']) / sum(n_dec(net['root']))
# title('$k_\mathrm{cpt}=%.1f{\\times}10^{-6}$' % (k_cpt * 1e6))
# sbn.barplot(arange(len(frac_dec)), frac_dec, color='#ff8082', edgecolor='none',
#             label='Incorrect')
# sbn.barplot(arange(len(frac_dec)), frac_cor, color='#8080ff', edgecolor='none',
#             label='Correct')
# sbn.despine()
# legend(ncol=2, bbox_to_anchor=(1.05, -0.1))
# tight_layout()
# savefig('figures/decision-location-hist_0.pdf')
# exit()

################################################################################
# Cascades - Decision Location Histograms
################################################################################

def fig1_subplot(net):
    k_cpt = net['hyperparams']['k_cpt']
    frac_dec = n_dec(net['root']) / sum(n_dec(net['root']))
    frac_cor = n_cor(net['root']) / sum(n_dec(net['root']))
    title('$k_\mathrm{cpt}=%.1f{\\times}10^{-6}$' % (k_cpt * 1e6))
    sbn.barplot(arange(3), frac_dec, color='#ff8082', edgecolor='none',
                label='Incorrect')
    sbn.barplot(arange(3), frac_cor, color='#8080ff', edgecolor='none',
                label='Correct')

figure(figsize=(8, 4))
sbn.set_style('ticks')
subplot(1, 3, 1); fig1_subplot(nets[2]); ylabel('Fraction of Decisions Made')
subplot(1, 3, 2); fig1_subplot(nets[10]); xlabel('Layer')
subplot(1, 3, 3); fig1_subplot(nets[18])
sbn.despine()
legend(ncol=2, bbox_to_anchor=(1.05, -0.1))
tight_layout()
savefig('figures/decision-location-hist.pdf')

################################################################################
# Cascades - Decision Location Histograms
################################################################################

def fig2_subplot(net):
    k_cpt = net['hyperparams']['k_cpt']
    title('$k_\mathrm{cpt}=%.1f{\\times}10^{-6}$' % (k_cpt * 1e6))
    ylim(0, 1)
    tot_frac_dec = zeros(3)
    for lab in range(10):
        frac_dec = n_dec_of(net['root'], lab) / sum(n_dec(net['root']))
        sbn.barplot(arange(3), frac_dec, color=cm.nipy_spectral(lab / 9.0),
            bottom=tot_frac_dec, label=('%i' % lab), edgecolor='none')
        tot_frac_dec += frac_dec

figure(figsize=(8, 4))
sbn.set_style('ticks')
subplot(1, 3, 1); fig2_subplot(nets[2]); ylabel('Fraction of Decisions Made')
subplot(1, 3, 2); fig2_subplot(nets[10]); xlabel('Layer')
subplot(1, 3, 3); fig2_subplot(nets[18])
sbn.despine()
legend(ncol=5, bbox_to_anchor=(1.05, -0.1), fontsize=8)
tight_layout()
savefig('figures/decision-location-hist-by-label.pdf')

################################################################################
# Cascades - Speed/Accuracy Trade-Off
################################################################################

accs = [acc(net['root']) for net in nets]
mocs = [moc(net['root']) for net in nets]

figure(figsize=(4, 3))
sbn.set_style('ticks')
xlim(0, 280000)
xlabel('Mean Op Count')
ylabel('Accuracy')
scatter(mocs, accs, label='Cascades')
scatter([784 * 256 + 256 * 256], [0.98], color='r', label='Traditional nets')
legend(loc='lower right', fontsize=8)
sbn.despine()
tight_layout()
savefig('figures/cascade-sat.pdf')

################################################################################
# Dendrogram
################################################################################

def draw_dendrogram(layer, x, y, width):
    pass

draw_dendrogram(nets[0], 0, 0, 10)
