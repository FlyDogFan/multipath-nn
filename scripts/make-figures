#!/usr/bin/env python3
'''
Generate accuracy/efficiency plots.
'''
from json import loads
from os import listdir, makedirs
from os.path import basename, splitext

import matplotlib.pyplot as plt
import seaborn as sns

################################################################################
# Load experiment results.
################################################################################

logs = {}

for log_name in listdir('stats'):
    with open('stats/' + log_name, 'r') as f:
        logs[splitext(log_name)[0]] = loads(f.read())

errs = {name: [1 - net['stats_ts']['acc'] for net in log]
        for name, log in logs.items()}
mocs = {name: [net['stats_ts']['moc'] for net in log]
        for name, log in logs.items()}

################################################################################
# Ensure that the output directory exists.
################################################################################

makedirs('figures', exist_ok=True)

################################################################################
# Generate figures.
################################################################################

def make_acc_eff_plot(dst, src):
    plt.figure(figsize=(6, 4))
    plt.xlabel('Mean Op Count')
    plt.ylabel('Error Rate')
    for log_name, label in src:
        plt.plot(mocs[log_name], errs[log_name], label=label)
    plt.ylim(0, 0.2)
    plt.legend()
    plt.tight_layout()
    plt.savefig('figures/' + dst)

make_acc_eff_plot('acc-eff.pdf', [
    ('sr-chains', 'Static Routing'),
    ('ds-chains', 'Decision Smoothing Chains'),
    ('cr-chains', 'Cost Regression Chains'),
    ('ds-trees', 'Decision Smoothing Trees'),
    ('cr-trees', 'Cost Regression Trees')])
