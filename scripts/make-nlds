#!/usr/bin/env python3
'''
Generate accuracy/efficiency plots.
'''
from glob import glob
from os import listdir, makedirs
from os.path import basename, splitext

import matplotlib as mpl
import matplotlib.patches as pch
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

################################################################################
# Load experiment results.
################################################################################

logs = {}

for log_name in listdir('nets'):
    log_paths = glob('nets/%s/*-stats.npy' % log_name)
    logs[splitext(log_name)[0]] = [np.load(p)[()] for p in sorted(log_paths)]

errs = {name: [1 - net['stats_ts']['acc'] for net in log]
        for name, log in logs.items()}
mocs = {name: [net['stats_ts']['moc'] for net in log]
        for name, log in logs.items()}

################################################################################
# Ensure that the output directory exists.
################################################################################

makedirs('figures', exist_ok=True)

################################################################################
# Generate node-link diagrams.
################################################################################

cls_labels = [
    '0', '1', '2', '3', '4',
    'Airplane', 'Automobile', 'Deer', 'Frog', 'Horse']

def nld_bounds(ℓ, x, y, r):
    x0 = x; x1 = x
    y0 = y; y1 = y
    sinks = ℓ['sinks'][1:]
    for i, s in enumerate(sinks):
        a = ((i + 1) / (len(sinks) + 1) - 0.5) * np.pi
        x_s = x + np.cos(a)
        y_s = y + r * np.sin(a)
        x2, x3, y2, y3 = nld_bounds(s, x_s, y_s, r / len(sinks))
        x0 = min(x0, x2); x1 = max(x1, x3)
        y0 = min(y0, y2); y1 = max(y1, y3)
    return x0, x1, y0, y1

def draw_acc_nld(ℓ, x, y, r):
    p_cor = ℓ['sinks'][0]['stats_ts']['p_cor']
    p_inc = ℓ['sinks'][0]['stats_ts']['p_inc']
    p_tot = p_cor + p_inc
    sinks = ℓ['sinks'][1:]
    if p_tot > 0.005:
        plt.pie([p_cor / p_tot, p_inc / p_tot],
                center=(x, y), startangle=90,
                radius=(np.sqrt(p_tot) / 2),
                colors=[sns.color_palette()[0],
                        sns.color_palette()[2]])
    else:
        plt.pie([1], center=(x, y),
                radius=(np.sqrt(0.005) / 2),
                colors=['k'])
    for i, s in enumerate(sinks):
        a = ((i + 1) / (len(sinks) + 1) - 0.5) * np.pi
        x_s = x + np.cos(a)
        y_s = y + r * np.sin(a)
        plt.plot([x, x_s], [y, y_s], 'k', linewidth=2, zorder=-1)
        draw_acc_nld(s, x_s, y_s, r / len(sinks))

def draw_cls_nld(ℓ, x, y, r):
    p_cor = ℓ['sinks'][0]['stats_ts']['p_cor_by_cls']
    p_inc = ℓ['sinks'][0]['stats_ts']['p_inc_by_cls']
    p_cls = list(map(sum, zip(p_cor, p_inc)))
    p_tot = sum(p_cls)
    sinks = ℓ['sinks'][1:]
    if p_tot > 0.005:
        plt.pie([p / p_tot for p in p_cls],
                center=(x, y), startangle=90,
                radius=(np.sqrt(p_tot) / 2),
                colors=sns.color_palette('hls', len(p_cls)))
    else:
        plt.pie([1], center=(x, y),
                radius=(np.sqrt(0.005) / 2),
                colors=['k'])
    for i, s in enumerate(sinks):
        a = ((i + 1) / (len(sinks) + 1) - 0.5) * np.pi
        x_s = x + np.cos(a)
        y_s = y + r * np.sin(a)
        plt.plot([x, x_s], [y, y_s], 'k', linewidth=2, zorder=-1)
        draw_cls_nld(s, x_s, y_s, r / len(sinks))

def make_chain_acc_nld(dst, log_name):
    plt.figure()
    n_nets = len(logs[log_name])
    max_depth = nld_bounds(logs[log_name][0]['root']['sinks'][0], 0, 0, 1)[1]
    for i, net in enumerate(logs[log_name]):
        draw_acc_nld(net['root']['sinks'][0], 0, i, 1)
    plt.arrow(0.4 * max_depth, -0.6, 0.2 * max_depth, 0, fc='#909090',
              ec='#909090', linewidth=3, head_width=0.075)
    plt.arrow(-0.6, 0.2 * (n_nets - 1), 0, 0.6 * (n_nets - 1), fc='#909090',
              ec='#909090', linewidth=3, head_width=0.075)
    plt.ylabel('Cost of Computation', fontsize='large', color='#606060')
    plt.xlabel('Layer Index', fontsize='large', color='#606060')
    plt.xlim(-0.7, max_depth + 0.7)
    plt.ylim(-0.7, n_nets - 0.3)
    plt.figlegend([
        pch.Patch(color=sns.color_palette()[0]),
        pch.Patch(color=sns.color_palette()[2])],
        ['Correct Labels', 'Incorrect Labels'],
        'lower right', fontsize='small')
    plt.gca().set_aspect('equal')
    plt.gcf().set_size_inches(max_depth + 2, n_nets + 2)
    plt.tight_layout()
    plt.savefig('figures/' + dst, transparent=True)

def make_chain_cls_nld(dst, log_name):
    plt.figure()
    n_nets = len(logs[log_name])
    max_depth = nld_bounds(logs[log_name][0]['root']['sinks'][0], 0, 0, 1)[1]
    for i, net in enumerate(logs[log_name]):
        draw_cls_nld(net['root']['sinks'][0], 0, i, 1)
    plt.arrow(0.4 * max_depth, -0.6, 0.2 * max_depth, 0, fc='#909090',
              ec='#909090', linewidth=3, head_width=0.075)
    plt.arrow(-0.6, 0.2 * (n_nets - 1), 0, 0.6 * (n_nets - 1), fc='#909090',
              ec='#909090', linewidth=3, head_width=0.075)
    plt.ylabel('Cost of Computation', fontsize='large', color='#606060')
    plt.xlabel('Layer Index', fontsize='large', color='#606060')
    plt.xlim(-0.7, max_depth + 0.7)
    plt.ylim(-0.7, n_nets - 0.3)
    plt.figlegend(
        [pch.Patch(color=c) for c in sns.color_palette('hls', 8)],
        cls_labels, 'lower right', ncol=4, columnspacing=1,
        fontsize='small')
    plt.gca().set_aspect('equal')
    plt.gcf().set_size_inches(max_depth + 2, n_nets + 2)
    plt.tight_layout()
    plt.savefig('figures/' + dst, transparent=True)

def make_tree_acc_nld(dst, log_name, i):
    plt.figure()
    net = logs[log_name][i]
    draw_acc_nld(net['root']['sinks'][0], 0, 0, 2)
    x0, x1, y0, y1 = nld_bounds(net['root']['sinks'][0], 0, 0, 2)
    plt.arrow(0.35 * x1, y0 - 0.33, 0.3 * x1, 0, fc='#909090',
              ec='#909090', linewidth=3, head_width=0.075)
    plt.xlabel('Dataflow', fontsize='large', color='#606060')
    plt.xlim(x0 - 0.4, x1 + 0.4)
    plt.ylim(y0 - 0.4, y1 + 0.4)
    plt.figlegend([
        pch.Patch(color=sns.color_palette()[0]),
        pch.Patch(color=sns.color_palette()[2])],
        ['Correct Labels', 'Incorrect Labels'],
        'lower right', fontsize='small')
    plt.gca().set_aspect('equal')
    plt.gcf().set_size_inches(x1 - x0 + 2, y1 - y0 + 2)
    plt.tight_layout()
    plt.savefig('figures/' + dst, transparent=True)

def make_tree_cls_nld(dst, log_name, i):
    plt.figure()
    net = logs[log_name][i]
    draw_cls_nld(net['root']['sinks'][0], 0, 0, 2)
    x0, x1, y0, y1 = nld_bounds(net['root']['sinks'][0], 0, 0, 2)
    plt.arrow(0.35 * x1, y0 - 0.33, 0.3 * x1, 0, fc='#909090',
              ec='#909090', linewidth=3, head_width=0.075)
    plt.xlabel('Dataflow', fontsize='large', color='#606060')
    plt.xlim(x0 - 0.4, x1 + 0.4)
    plt.ylim(y0 - 0.4, y1 + 0.4)
    plt.figlegend(
        [pch.Patch(color=c) for c in sns.color_palette('hls', 8)],
        cls_labels, 'upper left', fontsize='small')
    plt.gca().set_aspect('equal')
    plt.gcf().set_size_inches(x1 - x0 + 2, y1 - y0 + 2)
    plt.tight_layout()
    plt.savefig('figures/' + dst, transparent=True)

make_chain_acc_nld('acc-nld-ds-chains.pdf', 'one-true-ds-chains')
make_chain_acc_nld('acc-nld-cr-chains.pdf', 'one-true-cr-chains')
make_chain_acc_nld('acc-nld-ds-chains.svg', 'one-true-ds-chains')
make_chain_cls_nld('cls-nld-ds-chains.pdf', 'one-true-ds-chains')
make_chain_cls_nld('cls-nld-cr-chains.pdf', 'one-true-cr-chains')
make_chain_cls_nld('cls-nld-ds-chains.svg', 'one-true-ds-chains')

make_tree_acc_nld('acc-nld-cr-tree.pdf', 'one-true-cr-trees', 0)
make_tree_cls_nld('cls-nld-cr-tree.pdf', 'one-true-cr-trees', 0)
make_tree_cls_nld('cls-nld-cr-tree.svg', 'one-true-cr-trees', 0)
