#!/usr/bin/env python3
'''
Make presentation figures.
'''
from glob import glob
from os import listdir, makedirs

import matplotlib.gridspec as gridspec
import matplotlib.lines as lns
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

################################################################################
# Load experiment results.
################################################################################

logs = {n: [np.load(p)[()] for p in sorted(glob('nets/%s/*-stats.npy' % n))]
        for n in listdir('nets')}
errs = {name: [1 - net['stats_ts']['acc'] for net in log]
        for name, log in logs.items()}
mocs = {name: [net['stats_ts']['moc'] for net in log]
        for name, log in logs.items()}
stats = {k: (mocs[k], errs[k]) for k in mocs.keys()}

################################################################################
# Ensure that the output directory exists.
################################################################################

makedirs('figures/pres', exist_ok=True)

################################################################################
# Set global figure style properties.
################################################################################

sns.set_style('ticks')
sns.set_color_codes()
plt.rcParams['text.usetex'] = True
plt.rcParams['font.family'] = 'serif'

################################################################################
# Define a function to generate figure paths.
################################################################################

fig_i = -1

def next_fig_path():
    global fig_i
    fig_i += 1
    return 'figures/pres/%.2i.svg' % fig_i

################################################################################
# Compare training strategies.
################################################################################

plt.figure(figsize=(5, 3.5))
plt.xlabel('Mean Op Count')
plt.ylabel('Error Rate')
plt.plot(*stats['hybrid-sr'], c='b', label='Statically-Routed Nets')
plt.plot(*stats['hybrid-ac'], c='g', label='Actor Nets')
plt.xlim(0, 2.25e7)
plt.xticks([0, 1e7, 2e7], ['$0$', '$1{\\times}10^7$', '$2{\\times}10^7$'])
plt.ylim(0.015, 0.065)
plt.yticks([0.02, 0.04, 0.06])
plt.legend()
plt.tight_layout()
sns.despine()
plt.savefig(next_fig_path())
plt.close()

c = sns.color_palette('Paired')
plt.figure(figsize=(5, 3.5))
plt.xlabel('Mean Op Count')
plt.ylabel('Error Rate')
plt.plot(*stats['cifar10-sr'], c=c[1], label='CIFAR-10: Statically-Routed Nets')
plt.plot(*stats['cifar10-ac'], c=c[0], label='CIFAR-10: Actor Nets')
plt.plot(*stats['cifar5-sr'], c=c[3], label='CIFAR-5: Statically-Routed Nets')
plt.plot(*stats['cifar5-ac'], c=c[2], label='CIFAR-5: Actor Nets')
plt.plot(*stats['cifar2-sr'], c=c[5], label='CIFAR-2: Statically-Routed Nets')
plt.plot(*stats['cifar2-ac'], c=c[4], label='CIFAR-2: Actor Nets')
plt.xlim(0, 2.25e7)
plt.xticks([0, 1e7, 2e7], ['$0$', '$1{\\times}10^7$', '$2{\\times}10^7$'])
plt.ylim(0, 0.3)
plt.yticks([0.0, 0.1, 0.2, 0.3])
plt.legend()
plt.tight_layout()
sns.despine()
plt.savefig(next_fig_path())
plt.close()

c = sns.color_palette('Paired')
plt.figure(figsize=(5, 3.5))
plt.xlabel('Mean Op Count')
plt.ylabel('Error Rate')
plt.loglog(*stats['cifar10-sr'], c=c[1],
           label='CIFAR-10: Statically-Routed Nets')
plt.loglog(*stats['cifar10-ac'], c=c[0], label='CIFAR-10: Actor Nets')
plt.loglog(*stats['cifar5-sr'], c=c[3], label='CIFAR-5: Statically-Routed Nets')
plt.loglog(*stats['cifar5-ac'], c=c[2], label='CIFAR-5: Actor Nets')
plt.loglog(*stats['cifar2-sr'], c=c[5], label='CIFAR-2: Statically-Routed Nets')
plt.loglog(*stats['cifar2-ac'], c=c[4], label='CIFAR-2: Actor Nets')
plt.tight_layout()
sns.despine()
plt.savefig(next_fig_path())
plt.close()

plt.figure(figsize=(5, 3.5))
plt.xlabel('Mean Op Count')
plt.ylabel('Error Rate')
plt.plot(*stats['hybrid-sr'], c='b', label='Statically-Routed Nets')
plt.plot(*stats['hybrid-ac'], c='g', label='Actor Nets')
plt.plot(*stats['hybrid-cr'], c='r', label='Critic Nets')
plt.xlim(0, 2.25e7)
plt.xticks([0, 1e7, 2e7], ['$0$', '$1{\\times}10^7$', '$2{\\times}10^7$'])
plt.ylim(0.015, 0.065)
plt.yticks([0.02, 0.04, 0.06])
plt.legend()
plt.tight_layout()
sns.despine()
plt.savefig(next_fig_path())
plt.close()

plt.figure(figsize=(5, 3.5))
plt.xlabel('Mean Op Count')
plt.ylabel('Error Rate')
plt.plot(*stats['hybrid-sr'], c='b', label='Statically-Routed Nets')
plt.plot(*stats['hybrid-ac'], c='g', label='Actor Nets')
plt.plot(*stats['hybrid-ac-globopt'], c='m',
         label='Actor Nets, Regularized Policy')
plt.xlim(0, 2.25e7)
plt.xticks([0, 1e7, 2e7], ['$0$', '$1{\\times}10^7$', '$2{\\times}10^7$'])
plt.ylim(0.015, 0.065)
plt.yticks([0.02, 0.04, 0.06])
plt.legend()
plt.tight_layout()
sns.despine()
plt.savefig(next_fig_path())
plt.close()

plt.figure(figsize=(5, 3.5))
plt.xlabel('Mean Op Count')
plt.ylabel('Error Rate')
plt.plot(*stats['hybrid-sr'], c='b', label='Statically-Routed Nets')
plt.plot(*stats['hybrid-ac'], c='g', label='Actor Nets')
plt.plot(*stats['hybrid-ac-nokdec'], ':', c='g',
         label='Actor Nets, $k_\\texttt{dec}=0$')
plt.xlim(0, 2.25e7)
plt.xticks([0, 1e7, 2e7], ['$0$', '$1{\\times}10^7$', '$2{\\times}10^7$'])
plt.ylim(0.015, 0.065)
plt.yticks([0.02, 0.04, 0.06])
plt.legend()
plt.tight_layout()
sns.despine()
plt.savefig(next_fig_path())
plt.close()

plt.figure(figsize=(5, 3.5))
plt.xlabel('Mean Op Count')
plt.ylabel('Error Rate')
plt.plot(*stats['hybrid-sr'], c='b', label='Statically-Routed Nets')
plt.plot(*stats['hybrid-ac'], c='g', label='Actor Nets')
plt.plot(*stats['hybrid-ac-notalr'], '--', c='g', label='Actor Nets, no TALR')
plt.xlim(0, 2.25e7)
plt.xticks([0, 1e7, 2e7], ['$0$', '$1{\\times}10^7$', '$2{\\times}10^7$'])
plt.ylim(0.015, 0.065)
plt.yticks([0.02, 0.04, 0.06])
plt.legend()
plt.tight_layout()
sns.despine()
plt.savefig(next_fig_path())
plt.close()

plt.figure(figsize=(5, 3.5))
plt.xlabel('Mean Op Count')
plt.ylabel('Error Rate')
plt.plot(*stats['hybrid-sr'], c='b', label='Statically-Routed Nets')
plt.plot(*stats['hybrid-cr'], c='r', label='Critic Nets')
plt.plot(*stats['hybrid-cr-notalr'], '--', c='r', label='Critic Nets, no TALR')
plt.xlim(0, 2.25e7)
plt.xticks([0, 1e7, 2e7], ['$0$', '$1{\\times}10^7$', '$2{\\times}10^7$'])
plt.ylim(0.015, 0.065)
plt.yticks([0.02, 0.04, 0.06])
plt.legend()
plt.tight_layout()
sns.despine()
plt.savefig(next_fig_path())
plt.close()

plt.figure(figsize=(5, 3.5))
plt.xlabel('Mean Op Count')
plt.ylabel('Error Rate')
plt.plot(*stats['hybrid-sr'], c='b', label='Statically-Routed Nets')
plt.plot(*stats['hybrid-ac'], c='g', label='Actor Nets')
plt.plot(*stats['hybrid-ac-tree'], c='c', label='Actor Nets, Branching')
plt.xlim(0, 2.25e7)
plt.xticks([0, 1e7, 2e7], ['$0$', '$1{\\times}10^7$', '$2{\\times}10^7$'])
plt.ylim(0.015, 0.065)
plt.yticks([0.02, 0.04, 0.06])
plt.legend()
plt.tight_layout()
sns.despine()
plt.savefig(next_fig_path())
plt.close()

plt.figure(figsize=(5, 3.5))
plt.xlabel('Mean Op Count')
plt.ylabel('Error Rate')
plt.plot(*stats['hybrid-sr'], c='b', label='Statically-Routed Nets')
plt.plot(*stats['hybrid-ac'], c='g', label='Actor Nets')
plt.plot(*stats['hybrid-ac-dynkcpt'], c='#8b4513',
         label='Actor Net, Dynamic $k_\\texttt{cpt}$')
plt.xlim(0, 2.25e7)
plt.xticks([0, 1e7, 2e7], ['$0$', '$1{\\times}10^7$', '$2{\\times}10^7$'])
plt.ylim(0.015, 0.065)
plt.yticks([0.02, 0.04, 0.06])
plt.legend()
plt.tight_layout()
sns.despine()
plt.savefig(next_fig_path())
plt.close()

################################################################################
# Generate performance-as-function-of-network-width plots.
################################################################################

plt.figure(figsize=(5, 2))

plt.subplot(1, 3, 1)
plt.title('$16 \leq n_\mathrm{chan} \leq 128$')
plt.ylabel('Error Rate')
plt.plot(*stats['cifar10-sr'], c='b')
plt.plot(*stats['cifar10-ac'], c='g')
plt.xticks([0, 2e7], ['$0$', '$2{\\times}10^7$'])

plt.subplot(1, 3, 2)
plt.title('$32 \leq n_\mathrm{chan} \leq 256$')
plt.xlabel('Mean Op Count')
plt.plot(*stats['cifar10-sr-fat'], c='b')
plt.plot(*stats['cifar10-ac-fat'], c='g')
plt.xticks([0, 8e7], ['$0$', '$8{\\times}10^7$'])

plt.subplot(1, 3, 3)
plt.title('$48 \leq n_\mathrm{chan} \leq 384$')
plt.plot(*stats['cifar10-sr-fatter'], c='b')
plt.plot(*stats['cifar10-ac-fatter'], c='g')
plt.xticks([0, 1.8e8], ['$0$', '$1.8{\\times}10^8$'])

plt.figlegend(
    [lns.Line2D([], [], color='b'), lns.Line2D([], [], color='g')],
    ['Statically-Routed Nets', 'Actor Nets'],
    loc=(0.0, 0), fontsize='x-small')

plt.tight_layout(pad=0.1)
plt.subplots_adjust(bottom=0.35)
sns.despine()
plt.savefig(next_fig_path())
plt.close()

################################################################################
# Generate routing histograms.
################################################################################

def get_p_ev(net_path, net_i):
    log_paths = glob('nets/%s/%.4i-stats/*.npy' % (net_path, net_i))
    logs = [np.load(p)[()] for p in sorted(log_paths)]
    p_ev = np.zeros((len(logs), 8))
    for i, log in enumerate(logs):
        ℓ = log['root']['sinks'][0]
        for j in range(8):
            p_cor = ℓ['sinks'][0]['stats_ts']['p_cor']
            p_inc = ℓ['sinks'][0]['stats_ts']['p_inc']
            p_ev[i, j] = p_cor + p_inc
            try:
                ℓ = ℓ['sinks'][1]
            except:
                break
    return p_ev[::-1]

sns.set_style('ticks')
sns.set_color_codes()
plt.rcParams['text.usetex'] = True
plt.rcParams['text.latex.unicode'] = True
plt.rcParams['font.family'] = 'serif'
plt.figure(figsize=(5, 3))

plt.subplot(1, 4, 1)
plt.imshow(
    get_p_ev('hybrid-ac', 0),
    vmin=0, vmax=1, cmap='hot', aspect='auto')
plt.title(r'$k_\mathrm{cpt}=0$', fontsize='x-small')
plt.xticks([3, 7], ['4', '8'])
plt.yticks([16, 0], ['40k', '80k'])
plt.ylabel('Epoch Index')

plt.subplot(1, 4, 2)
plt.imshow(
    get_p_ev('hybrid-ac', 1),
    vmin=0, vmax=1, cmap='hot', aspect='auto')
plt.title(r'$k_\mathrm{cpt}=1{\times}10^{-9}$', fontsize='x-small')
plt.xticks([3, 7], ['4', '8'])
plt.yticks([])

plt.subplot(1, 4, 3)
plt.imshow(
    get_p_ev('hybrid-ac', 2),
    vmin=0, vmax=1, cmap='hot', aspect='auto')
plt.title(r'$k_\mathrm{cpt}=2{\times}10^{-9}$', fontsize='x-small')
plt.xticks([3, 7], ['4', '8'])
plt.yticks([])

plt.subplot(1, 4, 4)
plt.imshow(
    get_p_ev('hybrid-ac', 3),
    vmin=0, vmax=1, cmap='hot', aspect='auto')
plt.title(r'$k_\mathrm{cpt}=4{\times}10^{-9}$', fontsize='x-small')
plt.xticks([3, 7], ['4', '8'])
plt.yticks([])

plt.tight_layout(pad=0)
plt.colorbar(cax=plt.axes([0.9, 0.16, 0.025, 0.765]))
plt.text(
    0.5, 0, 'Layer Index',
    transform=plt.gcf().transFigure,
    va='bottom', ha='center', fontsize=11)
plt.subplots_adjust(bottom=0.16, top=0.925, right=0.88)
plt.savefig(next_fig_path())
