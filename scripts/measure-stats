#!/usr/bin/env python3
'''
Measure network performance statistics.
'''
from argparse import ArgumentParser
from glob import glob
from os import makedirs
from os.path import basename, join

import numpy as np
import tensorflow as tf

from lib.data import Dataset
from lib.desc import net_desc
from lib.op_counting import lazify_op_counts
from lib.serdes import read_net

################################################################################
# Parse command-line arguments.
################################################################################

parser = ArgumentParser(description=__doc__)
parser.add_argument('net_path', help='the network type to analyze')
parser.add_argument('data_path', help='the dataset to use')
parser.add_argument('stats_path', help='the output destination')
args = parser.parse_args()

################################################################################
# Load the dataset.
################################################################################

dataset = Dataset(args.data_path)

################################################################################
# Measure network statistics.
################################################################################

def p_cor_by_cls(net, ℓ):
    return tf.expand_dims(ℓ.p_ev * ℓ.δ_cor, 1) * net.y

def p_inc_by_cls(net, ℓ):
    return tf.expand_dims(ℓ.p_ev * (1 - ℓ.δ_cor), 1) * net.y

def state_tensors(net):
    return {(net, 'acc'): sum(ℓ.p_ev * ℓ.δ_cor for ℓ in net.leaves),
            (net, 'moc'): sum(ℓ.p_ev * ℓ.n_ops for ℓ in net.layers),
            **{(ℓ, 'p_cor'): ℓ.p_ev * ℓ.δ_cor for ℓ in net.leaves},
            **{(ℓ, 'p_inc'): ℓ.p_ev * (1 - ℓ.δ_cor) for ℓ in net.leaves},
            **{(ℓ, 'p_cor_by_cls'): p_cor_by_cls(net, ℓ) for ℓ in net.leaves},
            **{(ℓ, 'p_inc_by_cls'): p_inc_by_cls(net, ℓ) for ℓ in net.leaves},
            **{(ℓ, 'c_err'): ℓ.c_err for ℓ in net.leaves},
            **{(ℓ, 'c_err_cor'): ℓ.c_err_cor for ℓ in net.leaves
               if hasattr(ℓ, 'c_err_cor')}}

for net_path in sorted(glob(join(args.net_path, '*.npy'))):
    with tf.Graph().as_default():
        sess = tf.Session()
        with sess.as_default():
            net = read_net(net_path)
            desc = net_desc(net, dataset, {}, state_tensors(net))
            makedirs(args.stats_path, exist_ok=True)
            np.save(join(args.stats_path, basename(net_path)), desc)
