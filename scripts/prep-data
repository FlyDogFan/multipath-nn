#!/usr/bin/env python3
'''
Download and format MNIST, CIFAR-10, and CIFAR-100.
'''
from os import makedirs
from os.path import join
from shutil import unpack_archive
from tempfile import TemporaryDirectory
from urllib.request import urlretrieve

import numpy as np
import numpy.random as rand
import scipy.io as io
import scipy.misc as misc

################################################################################
# Download MNIST.
################################################################################

def log_mnist_progress(i, chunk_size, file_size):
    print('\rDownloading MNIST — %.2f%% complete.'
          % (100 * i * chunk_size / file_size), end='', flush=True)

mnist_url = 'http://www.cs.nyu.edu/~roweis/data/mnist_all.mat'
mnist_dir = TemporaryDirectory()
mnist_path = mnist_dir.name

urlretrieve(mnist_url, join(mnist_path, 'mnist.mat'), log_mnist_progress)
print(80 * '\b \b' + 'Downloading MNIST — done!')

################################################################################
# Reformat MNIST.
################################################################################

print('Reformatting MNIST...', end='', flush=True)
mnist_a = io.loadmat(join(mnist_path, 'mnist.mat'))
mnist_b = {
    'x0_tr': np.vstack([
        np.float32(np.reshape(mnist_a['train%i' % i], (-1, 28, 28, 1)) / 255)
        for i in range(10)]),
    'x0_ts': np.vstack([
        np.float32(np.reshape(mnist_a['test%i' % i], (-1, 28, 28, 1)) / 255)
        for i in range(10)]),
    'y_tr': np.vstack([
        np.ones((len(mnist_a['train%i' % i]), 1), 'f') * np.identity(10, 'f')[i]
        for i in range(10)]),
    'y_ts': np.vstack([
        np.ones((len(mnist_a['test%i' % i]), 1), 'f') * np.identity(10, 'f')[i]
        for i in range(10)])}

makedirs('data/', exist_ok=True)
io.savemat('data/mnist.mat', mnist_b, do_compression=True)
print(80 * '\b \b' + 'Reformatting MNIST — done!')

################################################################################
# Download CIFAR-10.
################################################################################

def log_cifar10_progress(i, chunk_size, file_size):
    print('\rDownloading CIFAR-10 — %.2f%% complete.'
          % (100 * i * chunk_size / file_size), end='', flush=True)

cifar10_url = 'https://www.cs.toronto.edu/~kriz/cifar-10-matlab.tar.gz'
cifar10_dir = TemporaryDirectory()
cifar10_path = cifar10_dir.name

urlretrieve(cifar10_url, join(cifar10_path, '_cifar10.tar.gz'),
            log_cifar10_progress)
print(80 * '\b \b' + 'Downloading CIFAR-10 — done!')

################################################################################
# Reformat and Gamma-Decode CIFAR-10.
################################################################################

print('Reformatting CIFAR-10...', end='', flush=True)
unpack_archive(join(cifar10_path, '_cifar10.tar.gz'), cifar10_path)

cifar10_a_tr = [
    io.loadmat(join(cifar10_path, 'cifar-10-batches-mat/data_batch_%i.mat' % i))
    for i in range(1, 6)]
cifar10_a_ts = [
    io.loadmat(join(cifar10_path, 'cifar-10-batches-mat/test_batch.mat'))]
cifar10_b = {
    'x0_tr': np.vstack([
        np.float32(np.transpose(
            np.reshape(batch['data']**2.2, (-1, 3, 32, 32)),
            (0, 2, 3, 1)) / 255**2.2)
        for batch in cifar10_a_tr]),
    'x0_ts': np.vstack([
        np.float32(np.transpose(
            np.reshape(batch['data']**2.2, (-1, 3, 32, 32)),
            (0, 2, 3, 1)) / 255**2.2)
        for batch in cifar10_a_ts]),
    'y_tr': np.vstack([
        np.float32(batch['labels'] == np.arange(10))
        for batch in cifar10_a_tr]),
    'y_ts': np.vstack([
        np.float32(batch['labels'] == np.arange(10))
        for batch in cifar10_a_ts])}

makedirs('data/', exist_ok=True)
io.savemat('data/cifar-10.mat', cifar10_b, do_compression=True)
print(80 * '\b \b' + 'Reformatting CIFAR-10 — done!')

################################################################################
# Combine MNIST and CIFAR-10.
################################################################################

def resize(x, h, w):
    return np.array([
        misc.imresize(x_i[:, :, 0], (h, w), mode='F')[:, :, None]
        for x_i in x])

def recolor(x, d_min=0.3):
    x_tf = []
    for x_i in x:
        c0 = rand.rand(3)
        c1 = rand.rand(3)
        while np.sqrt(np.sum(np.square(c1 - c0))) < d_min:
            c1 = rand.rand(3)
        x_tf.append(c0 + (c1 - c0) * x_i)
    return np.array(x_tf)

rand.seed(0)
print('Combining MNIST and CIFAR-10...', end='', flush=True)

cifar10 = io.loadmat('data/cifar-10.mat')
mnist = io.loadmat('data/mnist.mat')

hybrid = {
    'x0_tr': np.vstack([
        cifar10['x0_tr'],
        recolor(resize(mnist['x0_tr'], 32, 32))]),
    'x0_ts': np.vstack([
        cifar10['x0_ts'],
        recolor(resize(mnist['x0_ts'], 32, 32))]),
    'y_tr': np.vstack([
        np.hstack([cifar10['y_tr'], np.zeros_like(cifar10['y_tr'])]),
        np.hstack([np.zeros_like(mnist['y_tr']), mnist['y_tr']])]),
    'y_ts': np.vstack([
        np.hstack([cifar10['y_ts'], np.zeros_like(cifar10['y_ts'])]),
        np.hstack([np.zeros_like(mnist['y_ts']), mnist['y_ts']])])}

classes = [0, 1, 2, 3, 10, 11, 15, 17]
m_tr = [np.argmax(hybrid['y_tr'], 1) == c for c in classes]
m_ts = [np.argmax(hybrid['y_ts'], 1) == c for c in classes]

hybrid['x0_tr'] = np.vstack([
    hybrid['x0_tr'][m]
    for m in m_tr])
hybrid['x0_ts'] = np.vstack([
    hybrid['x0_ts'][m]
    for m in m_ts])
hybrid['y_tr'] = np.vstack([
    np.float32(np.ones((np.sum(m), 1)) * (np.arange(len(classes)) == c))
    for c, m in enumerate(m_tr)])
hybrid['y_ts'] = np.vstack([
    np.float32(np.ones((np.sum(m), 1)) * (np.arange(len(classes)) == c))
    for c, m in enumerate(m_ts)])

makedirs('data/', exist_ok=True)
io.savemat('data/hybrid.mat', hybrid, do_compression=True)
print(80 * '\b \b' + 'Combining MNIST and CIFAR-10 — done!')
