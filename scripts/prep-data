#!/usr/bin/env python3
from os import makedirs
from os.path import join
from shutil import unpack_archive
from tempfile import TemporaryDirectory
from urllib.request import urlretrieve

import numpy as np
import scipy.io as io
import scipy.ndimage.filters as flt

################################################################################
# Download MNIST.
################################################################################

def log_mnist_progress(i, chunk_size, file_size):
    print('\rDownloading MNIST — %.2f%% complete.'
          % (100 * i * chunk_size / file_size), end='', flush=True)

mnist_url = 'http://www.cs.nyu.edu/~roweis/data/mnist_all.mat'
mnist_dir = TemporaryDirectory()
mnist_path = mnist_dir.name

urlretrieve(mnist_url, join(mnist_path, 'mnist.mat'), log_mnist_progress)
print(80 * '\b \b' + 'Downloading MNIST — done!')

################################################################################
# Reformat MNIST.
################################################################################

print('Reformatting MNIST...', end='', flush=True)
mnist_a = io.loadmat(join(mnist_path, 'mnist.mat'))
mnist_b = {
    'x0_tr': np.vstack([
        np.float32(np.reshape(mnist_a['train%i' % i], (-1, 28, 28, 1)) / 255)
        for i in range(10)]),
    'x0_ts': np.vstack([
        np.float32(np.reshape(mnist_a['test%i' % i], (-1, 28, 28, 1)) / 255)
        for i in range(10)]),
    'y_tr': np.vstack([
        np.ones((len(mnist_a['train%i' % i]), 1), 'f') * np.identity(10, 'f')[i]
        for i in range(10)]),
    'y_ts': np.vstack([
        np.ones((len(mnist_a['test%i' % i]), 1), 'f') * np.identity(10, 'f')[i]
        for i in range(10)])}

makedirs('data/', exist_ok=True)
io.savemat('data/mnist.mat', mnist_b, do_compression=True)
print(80 * '\b \b' + 'Reformatting MNIST — done!')

################################################################################
# Download CIFAR-10.
################################################################################

def log_cifar_progress(i, chunk_size, file_size):
    print('\rDownloading CIFAR-10 — %.2f%% complete.'
          % (100 * i * chunk_size / file_size), end='', flush=True)

cifar_url = 'https://www.cs.toronto.edu/~kriz/cifar-10-matlab.tar.gz'
cifar_dir = TemporaryDirectory()
cifar_path = cifar_dir.name

urlretrieve(cifar_url, join(cifar_path, '_cifar.tar.gz'), log_cifar_progress)
print(80 * '\b \b' + 'Downloading CIFAR-10 — done!')

################################################################################
# Reformat and Gamma-Decode CIFAR-10.
################################################################################

print('Reformatting CIFAR-10...', end='', flush=True)
unpack_archive(join(cifar_path, '_cifar.tar.gz'), cifar_path)

cifar_a_tr = [
    io.loadmat(join(cifar_path, 'cifar-10-batches-mat/data_batch_%i.mat' % i))
    for i in range(1, 6)]
cifar_a_ts = [
    io.loadmat(join(cifar_path, 'cifar-10-batches-mat/test_batch.mat'))]
cifar_b = {
    'x0_tr': np.vstack([
        np.float32(np.transpose(
            np.reshape(batch['data']**2.2, (-1, 3, 32, 32)),
            (0, 2, 3, 1)) / 255**2.2)
        for batch in cifar_a_tr]),
    'x0_ts': np.vstack([
        np.float32(np.transpose(
            np.reshape(batch['data']**2.2, (-1, 3, 32, 32)),
            (0, 2, 3, 1)) / 255**2.2)
        for batch in cifar_a_ts]),
    'y_tr': np.vstack([
        np.float32(batch['labels'] == np.arange(10))
        for batch in cifar_a_tr]),
    'y_ts': np.vstack([
        np.float32(batch['labels'] == np.arange(10))
        for batch in cifar_a_ts])}

makedirs('data/', exist_ok=True)
io.savemat('data/cifar-10.mat', cifar_b, do_compression=True)
print(80 * '\b \b' + 'Reformatting CIFAR-10 — done!')

################################################################################
# Perform Local Luminance Normalization on CIFAR-10.
################################################################################

def normalize(x0, σ=3, ϵ=1e-3):
    return x0 / (
        0.2989 * flt.gaussian_filter(x0[..., 0], σ) +
        0.5870 * flt.gaussian_filter(x0[..., 1], σ) +
        0.1140 * flt.gaussian_filter(x0[..., 2], σ) + ϵ)[..., None]

print('Normalizing CIFAR-10...', end='', flush=True)

cifar_b_lln = {
    'x0_tr': np.array([normalize(x0) for x0 in cifar_b['x0_tr']]),
    'x0_ts': np.array([normalize(x0) for x0 in cifar_b['x0_ts']]),
    'y_tr': cifar_b['y_tr'],
    'y_ts': cifar_b['y_ts']}

io.savemat('data/cifar-10-lln.mat', cifar_b_lln, do_compression=True)
print(80 * '\b \b' + 'Normalizing CIFAR-10 — done!')
