#!/usr/bin/env python3
'''
Compare the accuracy and efficiency of decision smoothing and cost regression
networks.
'''
from json import dumps
from os import makedirs

from lib.data import Dataset
from lib.nets import CRRouting, DSRouting, LogReg, Net, ReConv, ReConvMP
from lib.training import train

################################################################################
# Load data.
################################################################################

dataset = Dataset('data/cifar-10.mat')
x0_shape = dataset.x0_shape
y_shape = dataset.y_shape
n_cls = y_shape[0]

################################################################################
# Define network hyperparameters.
################################################################################

k_cpts = [0] + [4**i * 1e-10 for i in range(7)]
k_cre = 0.1
λ = 0.8
ϵ = 0.5

batch_size = 64
n_epochs = 50

################################################################################
# Allocate a log for the experiment results.
################################################################################

log = {'sr': [], 'ds': [], 'cr': []}

################################################################################
# Train a statically-routed network.
################################################################################

print('\n —— Training statically-routed networks... ——\n')

for n_tf in range(7):
    root = LogReg(n_cls)
    for i in reversed(range(n_tf)):
        n_chan = 2**(i // 2) * 64
        root = (ReConv(n_chan, 1, 3, 0, λ, root) if i % 2 == 0 else
                ReConvMP(n_chan, 2, 3, 0, λ, root))
    net = Net(x0_shape, y_shape, root)
    name = 'Static Routing (n_tf=%i)' % n_tf
    desc = train(net, dataset, name, batch_size, n_epochs)
    log['sr'].append({'n_tf': n_tf, 'net': desc})

exit()

################################################################################
# Train decision smoothing networks.
################################################################################

print('\n —— Training decision smoothing networks... ——\n')

for k_cpt in k_cpts:
    net = Net(x0_shape, y_shape, DSRouting(ϵ, LogReg(n_cls),
        ReConv(32, 1, 3, k_cpt, λ, DSRouting(ϵ, LogReg(n_cls),
        ReConvMP(32, 2, 3, k_cpt, λ, DSRouting(ϵ, LogReg(n_cls),
            ReConv(64, 1, 3, k_cpt, λ, DSRouting(ϵ, LogReg(n_cls),
            ReConvMP(64, 2, 3, k_cpt, λ, DSRouting(ϵ, LogReg(n_cls),
                ReConv(128, 1, 3, k_cpt, λ, DSRouting(ϵ, LogReg(n_cls),
                ReConvMP(128, 2, 3, k_cpt, λ, LogReg(n_cls))))))))))))))
    name = 'Decision Smoothing (k_cpt=%.1e)' % k_cpt
    desc = train(net, dataset, name, batch_size, n_epochs)
    log['ds'].append({'k_cpt': k_cpt, 'net': desc})

################################################################################
# Train cost regressing networks.
################################################################################

print('\n —— Training cost regression networks... ——\n')

for k_cpt in k_cpts:
    net = Net(x0_shape, y_shape, CRRouting(k_cre, ϵ, LogReg(n_cls),
        ReConv(32, 1, 3, k_cpt, λ, CRRouting(k_cre, ϵ, LogReg(n_cls),
        ReConvMP(32, 2, 3, k_cpt, λ, CRRouting(k_cre, ϵ, LogReg(n_cls),
            ReConv(64, 1, 3, k_cpt, λ, CRRouting(k_cre, ϵ, LogReg(n_cls),
            ReConvMP(64, 2, 3, k_cpt, λ, CRRouting(k_cre, ϵ, LogReg(n_cls),
                ReConv(128, 1, 3, k_cpt, λ, CRRouting(k_cre, ϵ, LogReg(n_cls),
                ReConvMP(128, 2, 3, k_cpt, λ, LogReg(n_cls))))))))))))))
    name = 'Cost Regression (k_cpt=%.1e)' % k_cpt
    desc = train(net, dataset, name, batch_size, n_epochs)
    log['cr'].append({'k_cpt': k_cpt, 'net': desc})

################################################################################
# Save the results.
################################################################################

makedirs('nets/', exist_ok=True)
with open('nets/experiment-1.json', 'w') as f:
    f.write(dumps(log, sort_keys=True, indent=2, separators=(',', ': ')))

print('\n —— Saved the results as `nets/experiment-1.json`. ——\n')
