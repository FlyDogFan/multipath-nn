#!/usr/bin/env python3
'''
Sample network activity vectors.
'''
from json import dumps
from os import makedirs

import matplotlib.pyplot as plt
import numpy as np
import scipy.misc as misc
import seaborn as sns
import sklearn.manifold as manifold

from exp.dr_cifar import ReConvMax, batch_size, exp_specs, tf_specs
from lib.layer_types import unpack_pyramid

################################################################################
# Define support functions.
################################################################################

def autoscale(x):
    return (x - np.min(x)) / (np.max(x) - np.min(x))

def gamma_encode(x):
    return x**0.45

def reduce_dim(x):
    x_flat = np.reshape(x, (-1, x.shape[2]))
    x1_flat = manifold.MDS(n_components=3, n_init=1).fit_transform(x_flat)
    return np.reshape(x1_flat, x.shape[:2] + (3,))

################################################################################
# Load data.
################################################################################

dataset = exp_specs['ds-chains-em'].dataset()

n_samples = 32
n_feature_samples = 8

x0 = dataset.x0_ts[:n_samples]
y = dataset.y_ts[:n_samples]

################################################################################
# Load a network.
################################################################################

net = exp_specs['ds-chains-em'].nets[1]()
net.read('nets/ds-chains-em/net1.tfn')

################################################################################
# Log the layer at which each sample was classified.
################################################################################

makedirs('signals/p_ev', exist_ok=True)

for i, ℓ in enumerate(net.leaves):
    with open('signals/p_ev/layer%i.json' % i, 'w') as f:
        f.write(dumps(net.eval(ℓ.p_ev, x0, y).tolist(), indent=2))

################################################################################
# Sample image pyramids.
################################################################################

pyr = net.eval(unpack_pyramid(net.root.comps[0].x, x0.shape[:2]), x0, y)
pyr_lln = net.eval(unpack_pyramid(net.root.comps[1].x, x0.shape[:2]), x0, y)

makedirs('signals/pyr', exist_ok=True)
makedirs('signals/pyr-lln', exist_ok=True)

for i in range(n_samples):
    for j in range(len(pyr)):
        misc.imsave('signals/pyr/sample%i-scale%i.png' % (i, j),
                    gamma_encode(autoscale(pyr[j][i])))
        misc.imsave('signals/pyr-lln/sample%i-scale%i.png' % (i, j),
                    gamma_encode(autoscale(pyr_lln[j][i])))

################################################################################
# Sample feature maps.
################################################################################

tf_layers = [ℓ for ℓ in net.layers if isinstance(ℓ, ReConvMax)]

for i, ℓ in enumerate(tf_layers):
    makedirs('signals/x%i' % (i + 1), exist_ok=True)
    x = net.eval(unpack_pyramid(ℓ.x, tf_specs[i].shape0_out), x0, y)
    for j in range(n_feature_samples):
        for k in range(len(x)):
            try:
                x1 = reduce_dim(x[k][j])
                x1_clipped = np.clip(x1, -3 * np.std(x1), 3 * np.std(x1))
                misc.imsave('signals/x%i/sample%i-scale%i.png' % (i + 1, j, k),
                            gamma_encode(autoscale(x1_clipped)))
            except ValueError:
                pass

################################################################################
# Sample error signals.
################################################################################

makedirs('signals/c_err', exist_ok=True)

for i, ℓ in enumerate(net.leaves):
    b_tr = list(dataset.training_batches(batch_size))
    b_vl = list(dataset.test_batches(batch_size))
    c_err_tr = np.hstack([net.eval(ℓ.c_err, x0, y) for x0, y in b_tr])
    c_err_vl = np.hstack([net.eval(ℓ.c_err, x0, y) for x0, y in b_vl])
    c_err_cor = np.hstack([net.eval(ℓ.c_err_cor, x0, y) for x0, y in b_tr])
    plt.figure()
    sns.distplot(c_err_tr, norm_hist=True); plt.tight_layout()
    plt.savefig('signals/c_err/layer%i-tr.pdf' % i)
    plt.close()
    plt.figure()
    sns.distplot(c_err_vl, norm_hist=True); plt.tight_layout()
    plt.savefig('signals/c_err/layer%i-vl.pdf' % i)
    plt.close()
    plt.figure()
    sns.distplot(c_err_cor, norm_hist=True); plt.tight_layout()
    plt.savefig('signals/c_err/layer%i-cor.pdf' % i)
    plt.close()
