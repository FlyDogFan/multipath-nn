#!/usr/bin/env python3
'''
Train dynamically-routed networks
'''
from os import makedirs

import numpy as np
import tensorflow as tf

from lib.data import Dataset
from lib.nets import dr_chain
from lib.net_types import CRNet, DSNet
from lib.training import train

################################################################################
# Load and preprocess data.
################################################################################

m_cls = [0, 0, 1, 1, 1, 1, 1, 1, 0, 0]
w_cls = np.transpose([np.equal(m_cls, i) for i in range(2)])

dataset = Dataset('data/cifar-10.mat', n_vl=1280)
dataset.y_tr = np.dot(dataset.y_tr, w_cls)
dataset.y_ts = np.dot(dataset.y_ts, w_cls)
dataset.y_vl = np.dot(dataset.y_vl, w_cls)

x0_shape = dataset.x0_shape
y_shape = dataset.y_shape

################################################################################
# Define network hyperparameters.
################################################################################

t_train = tf.placeholder(tf.float32, ())
n_epochs = 50

optimizer = tf.train.MomentumOptimizer(
    0.1 / 10**(t_train // 10), 0.9)

route_stat = t_train < 5
k_cpts = [0, *[1e-10 * 2**i for i in range(11)]]
k_l2 = 1e-4

################################################################################
# Train networks
################################################################################

for typ in [DSNet, CRNet]:
    for k_cpt in k_cpts:
        net = dr_chain(typ, route_stat, k_cpt, optimizer)
        train(net, dataset, n_epochs=n_epochs,
              name=('%s (k_cpt=%e)' % (typ.__name__, k_cpt)),
              hypers=(lambda t: {t_train: t}))
        makedirs('nets/dr-chains', exist_ok=True)
        net.write('nets/dr-chains/k_cpt=%e.tfn' % k_cpt)
