#!/usr/bin/env python3
'''
Train dynamically-routed networks
'''
from os import makedirs
from os.path import isfile

import numpy as np
import tensorflow as tf

from lib.data import Dataset
from lib.nets import ds_chain
from lib.training import train

################################################################################
# Load and preprocess data.
################################################################################

m_cls = [0, 0, 1, 1, 1, 1, 1, 1, 0, 0]
w_cls = np.transpose([np.equal(m_cls, i) for i in range(2)])

dataset = Dataset('data/cifar-10.mat', n_vl=1280)
dataset.y_tr = np.dot(dataset.y_tr, w_cls)
dataset.y_ts = np.dot(dataset.y_ts, w_cls)
dataset.y_vl = np.dot(dataset.y_vl, w_cls)

################################################################################
# Define network hyperparameters.
################################################################################

n_epochs_sr = 40
λ_learn_sr = 0.1
μ_learn_sr = 0.9
t_anneal_sr = 10

n_epochs_dr = 10
λ_learn_dr = 0.01
μ_learn_dr = 0.9
t_anneal_dr = 10

k_cpts = [0, *(1e-10 * 2**i for i in range(11))]

################################################################################
# Ensure that the output directory exists.
################################################################################

makedirs('nets/ds-chains', exist_ok=True)

################################################################################
# Train a statically-routed network.
################################################################################

if not isfile('nets/ds-chains/sr.tfn'):
    with tf.Graph().as_default():
        t_train = tf.placeholder(tf.float32, ())
        optimizer = tf.train.MomentumOptimizer(
            λ_learn_sr / 10**(t_train // t_anneal_sr), μ_learn_sr)
        net = ds_chain(optimizer)
        train(net, dataset, n_epochs=n_epochs_sr,
              name='DSNet (routing="stat")',
              hypers=(lambda t: {
                  net.hypers.route_stat: True,
                  t_train: t}))
        net.write('nets/ds-chains/sr.tfn')

################################################################################
# Train dynamically-routed networks, initializing with the SR net's parameters.
################################################################################

for i, k_cpt in enumerate(k_cpts):
    with tf.Graph().as_default():
        t_train = tf.placeholder(tf.float32, ())
        optimizer = tf.train.MomentumOptimizer(
            λ_learn_dr / 10**(t_train // t_anneal_dr), μ_learn_dr)
        net = ds_chain(optimizer)
        net.read('nets/ds-chains/sr.tfn')
        train(net, dataset, n_epochs=n_epochs_dr,
              name=('DSNet (routing="dyn", k_cpt=%g)' % k_cpt),
              hypers=(lambda t: {
                  net.hypers.k_cpt: k_cpt,
                  t_train: t + n_sr_epochs}))
        net.write('nets/ds-chains/dr%i.tfn' % i)
