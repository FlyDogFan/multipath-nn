#!/usr/bin/env python3
'''
Train dynamically-routed networks
'''
from os import makedirs
from os.path import isfile

import numpy as np
import tensorflow as tf

from lib.data import Dataset
from lib.nets import ds_chain
from lib.training import train

################################################################################
# Load and preprocess data.
################################################################################

m_cls = [0, 0, 1, 1, 1, 1, 1, 1, 0, 0]
w_cls = np.transpose([np.equal(m_cls, i) for i in range(2)])

dataset = Dataset('data/cifar-10.mat', n_vl=1280)
dataset.y_tr = np.dot(dataset.y_tr, w_cls)
dataset.y_ts = np.dot(dataset.y_ts, w_cls)
dataset.y_vl = np.dot(dataset.y_vl, w_cls)

x0_shape = dataset.x0_shape
y_shape = dataset.y_shape

################################################################################
# Define network hyperparameters.
################################################################################

t_train = tf.placeholder(tf.float32, ())
n_sr_epochs = 20
n_dr_epochs = 10

optimizer = tf.train.MomentumOptimizer(
    0.1 / 10**(t_train // 10), 0.9)

k_cpts = [0, *[1e-10 * 2**i for i in range(11)]]

################################################################################
# Ensure that the output directory exists.
################################################################################

makedirs('nets/ds-chains', exist_ok=True)

################################################################################
# Train a statically-routed network.
################################################################################

if not isfile('nets/ds-chains/sr.tfn'):
    net = ds_chain(tf.constant(True), 0, optimizer)
    train(net, dataset, n_epochs=n_sr_epochs,
          name='DSNet (routing="stat")',
          hypers=(lambda t: {t_train: t}))
    net.write('nets/ds-chains/sr.tfn')

################################################################################
# Train dynamically-routed networks, initializing with the SR net's parameters.
################################################################################

for i, k_cpt in enumerate(k_cpts):
    net = ds_chain(tf.constant(False), k_cpt, optimizer)
    net.read('nets/ds-chains/sr.tfn')
    train(net, dataset, n_epochs=n_dr_epochs,
          name=('DSNet (routing="dyn", k_cpt=%e)' % k_cpt),
          hypers=(lambda t: {t_train: t + n_sr_epochs}))
    net.write('nets/ds-chains/dr%i.tfn' % i)
