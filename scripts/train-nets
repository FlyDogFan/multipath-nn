#!/usr/bin/env python3
'''
Train statically- or dynamically-routed networks.
'''
from argparse import ArgumentParser
from collections import namedtuple
from os import makedirs
from os.path import dirname, join
from sys import maxsize

import numpy as np
import numpy.random as rand
import tensorflow as tf

from lib.data import Dataset
from lib.desc import net_desc, render_net_desc
from lib.layer_types import (
    BatchNorm, Chain, CrossEntropyError, LinTrans, MultiscaleBatchNorm,
    MultiscaleConvMax, MultiscaleLLN, MultiscaleRect, Rect, Select,
    Softmax, ToPyramid)

from lib.net_types import CRNet, DSNet, SRNet
from lib.serdes import write_net

################################################################################
# Define network hyperparameters.
################################################################################

conv_supp = 3
router_n_chan = 16

k_cpts = [0.0, 1e-9, 2e-9, 4e-9, 8e-9, 1.6e-8, 3.2e-8, 6.4e-8]
k_l2 = 1e-4
σ_w = 1

arch = [
    [16, 16, 16, 16],
    [16, 16, 16, 16],
    [32, 32, 32],
    [32, 32, 32],
    [64, 64],
    [64, 64],
    [128],
    [128]]

################################################################################
# Define training hyperparameters.
################################################################################

n_iter = 60000
t_log = 2500
batch_size = 128

n_vl = 1280
p_vl = 0.05

λ_lrn_0 = 0.1
t_anneal = 5000

################################################################################
# Parse command-line arguments.
################################################################################

parser = ArgumentParser(description=__doc__)
parser.add_argument('net_type', help='the type of network to train')
parser.add_argument('data_path', help='the dataset to use')
parser.add_argument('net_path', help='the output directory')
parser.add_argument('--use_em', help='use error mapping', action='store_true')
args = parser.parse_args()

################################################################################
# Load the dataset.
################################################################################

dataset = Dataset(args.data_path, n_vl)
x0_shape = dataset.x0_shape
y_shape = dataset.y_shape

################################################################################
# Define network components.
################################################################################

def router(n_sinks):
    return None if n_sinks < 2 else Chain(name='Router', comps=[
        Select(i=-1), LinTrans(n_chan=router_n_chan, k_l2=k_l2, σ_w=σ_w),
        BatchNorm(), Rect(), LinTrans(n_chan=n_sinks, k_l2=k_l2, σ_w=0)])

def pyr(*sinks):
    return Chain(
        name='ToPyramidLLN', sinks=sinks,
        router=router(len(sinks)), comps=[
            ToPyramid(n_scales=len(arch[0])),
            MultiscaleLLN(), MultiscaleBatchNorm()])

def rcm(i, *sinks):
    return Chain(
        name='ReConvMax', sinks=sinks,
        router=router(len(sinks)), comps=[
            MultiscaleConvMax(
                n_chan=arch[i], supp=conv_supp,
                k_l2=k_l2, σ_w=σ_w),
            MultiscaleBatchNorm(), MultiscaleRect()])

def reg():
    return Chain(name='LogReg', comps=[
        Select(i=-1),
        LinTrans(n_chan=y_shape[0], k_l2=k_l2, σ_w=σ_w),
        Softmax(), CrossEntropyError()])

################################################################################
# Define network constructors lists.
################################################################################

def sr_chain(n_tf):
    def make_net():
        root = reg()
        for i in reversed(range(n_tf)):
            root = rcm(i, root)
        root = pyr(root)
        return SRNet(
            x0_shape=x0_shape,
            y_shape=y_shape,
            root=root)
    return make_net

def dr_chain(type_, k_cpt=0.0):
    def make_net():
        root = rcm(-1, reg())
        for i in reversed(range(len(arch) - 1)):
            root = rcm(i, reg(), root)
        root = pyr(root)
        return type_(
            x0_shape=x0_shape,
            y_shape=y_shape,
            k_cpt=k_cpt, root=root)
    return make_net

def dr_tree(type_, k_cpt=0.0):
    return lambda: type_(
        x0_shape=x0_shape,
        y_shape=y_shape,
        k_cpt=k_cpt, root=(pyr(
            rcm(0, reg(),
            rcm(1, reg(),
                rcm(2, reg(),
                rcm(3, reg(),
                    rcm(4, reg(),
                    rcm(5, reg())),
                    rcm(4, reg(),
                    rcm(5, reg())))),
                rcm(2, reg(),
                rcm(3, reg(),
                    rcm(4, reg(),
                    rcm(5, reg())),
                    rcm(4, reg(),
                    rcm(5, reg())))))))))

net_constr_lists = {
    'sr-chains': [sr_chain(n) for n in range(1, len(arch) + 1)],
    'ds-chains': [dr_chain(DSNet, k) for k in k_cpts],
    'cr-chains': [dr_chain(CRNet, k) for k in k_cpts],
    'ds-trees': [dr_tree(DSNet, k) for k in k_cpts],
    'cr-trees': [dr_tree(CRNet, k) for k in k_cpts]}

################################################################################
# Define a training function.
################################################################################

def state_tensors(net):
    tot_n_ops = lambda ℓ: ℓ.n_ops + getattr(ℓ.router, 'n_ops', 0)
    return {(net, 'acc'): sum(ℓ.p_ev * ℓ.δ_cor for ℓ in net.leaves),
            (net, 'moc'): sum(ℓ.p_ev * tot_n_ops(ℓ) for ℓ in net.layers),
            **{(ℓ, 'p_cor'): ℓ.p_ev * ℓ.δ_cor for ℓ in net.leaves},
            **{(ℓ, 'p_inc'): ℓ.p_ev * (1 - ℓ.δ_cor) for ℓ in net.leaves}}

def train(dst, net):
    net_state = state_tensors(net)
    for t in range(n_iter):
        x0, y = dataset.augmented_training_batch()
        print('  --- Iteration %i ---\r' % (t + 1),
              end='', flush=True)
        net.train.run({
            net.x0: x0, net.y: y, net.mode: 'tr',
            net.τ: 0.1 / 2**(t / 15000),
            net.λ_lrn: λ_lrn_0 / 2**(t / t_anneal)})
        if args.use_em and rand.rand() < p_vl:
            x0, y = dataset.validation_batch()
            net.validate.run({
                net.x0: x0, net.y: y,
                net.τ: 0.1 / 2**(t / 15000),
                net.mode: 'vl'})
        if (t + 1) % t_log == 0:
            desc = render_net_desc(
                net_desc(net, dataset, {}, net_state),
                '%s — Epoch %i' % (dst, t + 1))
            makedirs(dirname(dst), exist_ok=True)
            with open(dst[:-4] + '.log', 'a+') as f:
                f.write(desc + '\n')
            print(desc)
    makedirs(dirname(dst), exist_ok=True)
    write_net(dst, net)

################################################################################
# Train networks.
################################################################################

for i, net_constr in enumerate(net_constr_lists[args.net_type]):
    with tf.Graph().as_default():
        sess = tf.Session(config=tf.ConfigProto(
            gpu_options=tf.GPUOptions(allow_growth=True)))
        with sess.as_default():
            net = net_constr()
            tf.initialize_all_variables().run()
            train(join(args.net_path, '%.4i.npy' % i), net)
