#!/usr/bin/env python3
'''
Train statically-routed networks.
'''
from os import makedirs

import numpy as np
import tensorflow as tf

from lib.data import Dataset
from lib.nets import sr_chain, tf_specs
from lib.training import train

################################################################################
# Load and preprocess data.
################################################################################

m_cls = [0, 0, 1, 1, 1, 1, 1, 1, 0, 0]
w_cls = np.transpose([np.equal(m_cls, i) for i in range(2)])

dataset = Dataset('data/cifar-10.mat')
dataset.y_tr = np.dot(dataset.y_tr, w_cls)
dataset.y_ts = np.dot(dataset.y_ts, w_cls)

x0_shape = dataset.x0_shape
y_shape = dataset.y_shape

################################################################################
# Define training hyperparameters.
################################################################################

t_train = tf.placeholder(tf.float32, ())
n_epochs = 50

optimizer = tf.train.MomentumOptimizer(
    0.1 / 10**(t_train // 10), 0.9)

################################################################################
# Train networks.
################################################################################

for n_tf in reversed(range(len(tf_specs) + 1)):
    net = sr_chain(n_tf, optimizer)
    train(net, dataset, n_epochs=n_epochs,
          name=('SRNet (n_tf=%i)' % n_tf),
          hypers=(lambda t: {t_train: t}))
    makedirs('nets/sr-chains', exist_ok=True)
    net.write('nets/sr-chains/n_tf=%i.tfn' % n_tf)
